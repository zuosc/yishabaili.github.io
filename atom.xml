<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一杀百里的博客</title>
  
  <subtitle>愿无岁月可回头，且以情深共余生😘</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zuosc.github.io/"/>
  <updated>2018-01-09T12:28:29.893Z</updated>
  <id>https://zuosc.github.io/</id>
  
  <author>
    <name>yishabaili</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Ubuntu中安装Transmission笔记</title>
    <link href="https://zuosc.github.io/2018/01/09/%E5%9C%A8Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85Transmission%E7%AC%94%E8%AE%B0/"/>
    <id>https://zuosc.github.io/2018/01/09/在Ubuntu中安装Transmission笔记/</id>
    <published>2018-01-09T12:39:49.000Z</published>
    <updated>2018-01-09T12:28:29.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Transmission是一种BitTorrent客户端，特点是一个跨平台的后端和其上的简洁的用户界面。Transmission以MIT许可证和GNU通用公共许可证双许可证授权，因此是一款自由软件。</p><h1 id="移动端APP"><a href="#移动端APP" class="headerlink" title="移动端APP"></a>移动端APP</h1><p>似乎IOS端是没有APP的，安卓端有一个不错的。<a href="https://play.google.com/store/apps/details?id=com.neogb.rtac" target="_blank" rel="external">Google Play 地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Transmission是一种BitTorrent客户端，特点是一个跨平台的后端和其上的简洁的用户界面。Transmission以MIT许可
      
    
    </summary>
    
    
      <category term="Transmission" scheme="https://zuosc.github.io/tags/Transmission/"/>
    
      <category term="ubuntu" scheme="https://zuosc.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>对外服务集合</title>
    <link href="https://zuosc.github.io/2017/12/22/%E5%AF%B9%E5%A4%96%E6%9C%8D%E5%8A%A1%E9%9B%86%E5%90%88/"/>
    <id>https://zuosc.github.io/2017/12/22/对外服务集合/</id>
    <published>2017-12-22T09:40:49.000Z</published>
    <updated>2017-12-22T09:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对外服务集合"><a href="#对外服务集合" class="headerlink" title="对外服务集合"></a>对外服务集合</h2><p>1、http(s)://key.123456.cloud/jet.jsp(略敏感，有心人自然能猜到这是什么服务器)</p><p>2、kms.123456.cloud (继续猜喽，聪明人都知道)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对外服务集合&quot;&gt;&lt;a href=&quot;#对外服务集合&quot; class=&quot;headerlink&quot; title=&quot;对外服务集合&quot;&gt;&lt;/a&gt;对外服务集合&lt;/h2&gt;&lt;p&gt;1、http(s)://key.123456.cloud/jet.jsp(略敏感，有心人自然能猜到这是什么服
      
    
    </summary>
    
    
      <category term="KMS" scheme="https://zuosc.github.io/tags/KMS/"/>
    
      <category term="Jetbrains" scheme="https://zuosc.github.io/tags/Jetbrains/"/>
    
  </entry>
  
  <entry>
    <title>使用Let&#39;s Encrypt加密你的小站</title>
    <link href="https://zuosc.github.io/2017/12/20/%E4%BD%BF%E7%94%A8Let&#39;s%20Encrypt%E5%8A%A0%E5%AF%86%E4%BD%A0%E7%9A%84%E5%B0%8F%E7%AB%99/"/>
    <id>https://zuosc.github.io/2017/12/20/使用Let&#39;s Encrypt加密你的小站/</id>
    <published>2017-12-20T10:39:49.000Z</published>
    <updated>2017-12-21T05:07:13.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a>是一个免费并且开源的CA，且已经获得Mozilla、微软等主要浏览器厂商的根授信。它极大低降低DV证书的入门门槛，进而推进全网的HTTPS化。</p><p><a href="https://certbot.eff.org/" target="_blank" rel="external">Certbot</a> is an easy-to-use client that fetches a certificate from Let’s Encrypt—an open certificate authority launched by the EFF, Mozilla, and others—and deploys it to a web server.</p><p>本文所有的操作均在Ubuntu14.04下进行安装和配置。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接安装Let’s Encrypt相对比较复杂和费事。为了简化安装步骤，我们就直接使用 Let’s Encrypt 官网推荐的自动部署脚本<a href="https://certbot.eff.org/" target="_blank" rel="external">Certbot</a>。<br>根据环境选择，我们选择Nginx+Ubuntu14.04，进入官方推荐脚本<a href="https://certbot.eff.org/#ubuntutrusty-nginx" target="_blank" rel="external">页面</a>，脚本如下：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>ppa:certbot/certbot</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure></p><p>因为我本机已经有了python和Nginx，所以我的脚本简化为了<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install certbot</span><br></pre></td></tr></table></figure></p><p>接下来，我们要生成自己的证书。</p><ul><li><p>获取证书前需要先停止 Nginx 服务</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx <span class="built_in">stop</span></span><br></pre></td></tr></table></figure></li><li><p>生成单域名证书</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot certonly <span class="comment">--standalone --email your@email.com -d yourdomain.com</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Tips:<br>yourdomain.com目前必须是你的绝对域名，因为Let’s Encrypt暂时还不支持泛域名，但是根据官方的消息说，预计2018年一月，会实现支持。<a href="https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html" target="_blank" rel="external">Wildcard Certificates Coming January 2018</a></p></blockquote><p>到此，如果没有什么意外，执行完命令之后，你就可以看到你的证书创建成功的提示！默认是在 /etc/letsencrypt/live 路径下。</p><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>有了证书，接下来我们就可以配置Nginx了。<br>进入Nginx的配置文件夹（/etc/nginx/sites-available/），创建一个ssl.conf配置文件，在里面增加一个server配置。<br>配置的内容，基本和监听http的配置相似，主要的区别是监听443端口和证书的加载，一个例子如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="comment"># SSL configuration</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_certificate</span>   /etc/letsencrypt/live/<span class="number">123456</span>.cloud/fullchain.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span>  /etc/letsencrypt/live/<span class="number">123456</span>.cloud/privkey.pem;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存，然后reload ngxin（nginx -s reload）配置。这时候我们就可以在域名前加上https，就可以发现成功了！</p><h2 id="仅限Https访问"><a href="#仅限Https访问" class="headerlink" title="仅限Https访问"></a>仅限Https访问</h2><p>有了Https，我们一般也就不想要http的访问了，或者说想把所有的http请求转为https。方法有很多种，我的方法是使用rewrite，把原先的Http全部转化为Https。<br>一个例子如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> <span class="number">123456</span>.cloud;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自此，个人小站的Https加密工作完成。</p><h2 id="Github-Pages使用Https"><a href="#Github-Pages使用Https" class="headerlink" title="Github Pages使用Https"></a>Github Pages使用Https</h2><p>一般来说，我们都会把自己的Github Pages博客定义成自己的域名。但是会发现，变为自己的域名之后，就没有Https了。所以为了能让我们的博客也用上Https，这时候也要折腾一下了。<br>原理很简单，就是用自己的服务器进行反向代理,实际上访问Github Pages博客就是访问自己的服务器。<br>我自己的配置如下，<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> blog.<span class="number">123456</span>.cloud;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>   /etc/letsencrypt/live/blog.<span class="number">123456</span>.cloud/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /etc/letsencrypt/live/blog.<span class="number">123456</span>.cloud/privkey.pem;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host <span class="variable">$http_host</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span>         http://151.101.229.147;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里需要注意的是，proxy_pass的地址是ping自己的Github Pages地址得到的，也就是那个.io结尾的地址。然后在你的域名提供商那里，修改你博客的A地址解析就可以了。<br>这里有个细节需要注意的是，ping自己的GitHub Pages，应该在Nginx所在的服务器进行ping，这样得到的IP是最快的！<br>当然，如果这里你也仅限Https访问的话，把你的http监听也进行rewrite一下就好了！</p><h2 id="证书续期"><a href="#证书续期" class="headerlink" title="证书续期"></a>证书续期</h2><p>Let’s Encrypt 生成的免费证书为3个月时间，使用 certbot renew 可以无限免费续签 Https 证书。<br>为了方便，我们可以使用crontab进行自动续期。注意在使用certbot renew的时候，要先关闭nginx才能成功。</p><h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><p>1、<strong><em>Problem binding to port 443: Could not bind to IPv4 or IPv6.. Skipping</em></strong><br>原因和解决方案：这是因为80、443端口被占用，解除对端口的占用即可，例如执行 service nginx stop ^_^</p><p>2、<strong><em>DNS解析生效慢</em></strong><br>解决方案：你的域名供应商一般都会提供DNS服务器，ping一下dns服务器，得到IP。然后在你本机的DNS配置里，换成ping DNS服务器得到IP即可。</p><p>3、<strong><em>Nginx配置不起作用，DNS也不起作用</em></strong><br>解决方案：<br>    (1)、换除Chrome以外的浏览器<br>    (2)、在Chrome中，F12打开控制台，按住刷新按钮，选择‘清空缓存并硬性重新加载’<br>Chrome为了加快速度，这个的缓存机制倒是挺讨厌的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let’
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://zuosc.github.io/tags/ubuntu/"/>
    
      <category term="Let&#39;s Encrypt" scheme="https://zuosc.github.io/tags/Let-s-Encrypt/"/>
    
      <category term="Nginx" scheme="https://zuosc.github.io/tags/Nginx/"/>
    
      <category term="ssl" scheme="https://zuosc.github.io/tags/ssl/"/>
    
      <category term="GitHub Pages" scheme="https://zuosc.github.io/tags/GitHub-Pages/"/>
    
      <category term="letsencrypt" scheme="https://zuosc.github.io/tags/letsencrypt/"/>
    
      <category term="https" scheme="https://zuosc.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu中搭建KMS服务器</title>
    <link href="https://zuosc.github.io/2017/11/11/%E5%9C%A8Ubuntu%E4%B8%AD%E6%90%AD%E5%BB%BAKMS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://zuosc.github.io/2017/11/11/在Ubuntu中搭建KMS服务器/</id>
    <published>2017-11-11T11:02:49.000Z</published>
    <updated>2017-12-21T14:03:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>基于<a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="external">vlmcsd</a>搭建的KMS服务器。<br>根据github上的说明，这个工具是用C写的，没有任何依赖，可以直接运行。而且它横跨几乎现在所有的系统平台，如Android, FreeBSD, Solaris, Minix, Mac OS, iOS, Windows。相比于另一款工具<a href="https://github.com/myanaloglife/py-kms" target="_blank" rel="external">py-kms</a>需要依赖pyhont2或者python3，可谓是非常干净舒爽。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、在任意环境中，下载最新的vlmcsd releases版本，<a href="https://github.com/Wind4/vlmcsd/releases" target="_blank" rel="external">下载地址</a>。如在linux中，可以使用wget下载：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Wind4/</span>vlmcsd<span class="regexp">/releases/</span>download<span class="regexp">/svn1111/</span>binaries.tar.gz</span><br></pre></td></tr></table></figure></p><p>2、解压我们下载的包，进入对应的目录。如Ubuntu系统，我们可以进入binaries/Linux/intel/static目录中</p><p>3、选择对应的文件，这里我们选择vlmcsdmulti-x64-musl-static文件。然后把这个文件放到我们想要的文件中。</p><p>4、执行chmod命令，为这个文件赋予权限：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> u+<span class="keyword">x</span> /usr/<span class="keyword">local</span>/KMS-server</span><br></pre></td></tr></table></figure></p><p>权限赋予完毕之后，直接执行命令<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vlmcsdmulti-x64-musl-<span class="keyword">static</span> vlmcsd</span><br></pre></td></tr></table></figure></p><p>如果没有任何错误提示，代表我们成功了。不放心的话，可以再执行一遍，会提示我们端口(1688)和地址已经被占用。</p><p>5、若有防火墙，记得把1688端口开放，然后加入自启动。如在Ubuntu中，可以编辑/etc/rc.local文件，在启动项里加入启动命令。</p><p>6、复制以下文本<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/d</span> <span class="string">"%SystemRoot%\system32"</span></span><br><span class="line">slmgr <span class="string">/skms</span> 你的VPS的IP或者域名,域名似乎不能加http之类的</span><br><span class="line">slmgr <span class="string">/ato</span></span><br><span class="line">slmgr <span class="string">/xpr</span></span><br></pre></td></tr></table></figure></p><p>存成bat格式的文件，然后右键以<font color="red" size="3"><strong>管理员身份</strong></font>运行。</p><p>7、验证是否激活。在cmd或powershell中执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr<span class="selector-class">.vbs</span> -dlv</span><br></pre></td></tr></table></figure></p><p>不出意外的话，会显示已经激活成功的信息。  </p><p>8、这个kms激活服务器，同样可以用来激活office，原理基本一致。可以参考原作者的<a href="http://wind4.github.io/vlmcsd/" target="_blank" rel="external">github pages</a>进行激活。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;基于&lt;a href=&quot;https://github.com/Wind4/vlmcsd&quot; target=&quot;_blank&quot; rel=&quot;exter
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://zuosc.github.io/tags/ubuntu/"/>
    
      <category term="kms" scheme="https://zuosc.github.io/tags/kms/"/>
    
      <category term="激活服务器" scheme="https://zuosc.github.io/tags/%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="vlmcsd" scheme="https://zuosc.github.io/tags/vlmcsd/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zuosc.github.io/2017/11/11/hello-world/"/>
    <id>https://zuosc.github.io/2017/11/11/hello-world/</id>
    <published>2017-11-11T10:35:08.538Z</published>
    <updated>2017-11-11T10:35:08.538Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
